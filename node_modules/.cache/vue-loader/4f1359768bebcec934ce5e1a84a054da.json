{"remainingRequest":"/root/Arbitrium/Arbitrium_ControlPanel/node_modules/vue-loader/lib/index.js??vue-loader-options!/root/Arbitrium/Arbitrium_ControlPanel/src/views/Shell.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/root/Arbitrium/Arbitrium_ControlPanel/src/views/Shell.vue","mtime":1609371447803},{"path":"/root/Arbitrium/Arbitrium_ControlPanel/node_modules/css-loader/dist/cjs.js","mtime":1608611815937},{"path":"/root/Arbitrium/Arbitrium_ControlPanel/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1608611815653},{"path":"/root/Arbitrium/Arbitrium_ControlPanel/node_modules/postcss-loader/src/index.js","mtime":1608611816305},{"path":"/root/Arbitrium/Arbitrium_ControlPanel/node_modules/cache-loader/dist/cjs.js","mtime":1608611815941},{"path":"/root/Arbitrium/Arbitrium_ControlPanel/node_modules/vue-loader/lib/index.js","mtime":1608611815653}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmNtZF9vdXQgewogICAgd2hpdGUtc3BhY2U6IHByZS1saW5lCn0K"},{"version":3,"sources":["Shell.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;AACA;AACA","file":"Shell.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<v-container>\n\n  <VueTerminal :intro=\"intro\"\n                console-sign=\"user@zombie:~$\"\n                allow-arbitrary\n                height=\"500px\"\n                @command=\"onCliCommand\">\n    </VueTerminal>\n    <v-overlay :value=\"overlay\">\n      <v-card>\n            <v-btn tile color=\"red\" @click=\"closeWin\">\n              <v-icon left>info</v-icon> Device is no longer connected\n            </v-btn>\n      </v-card>\n        \n    </v-overlay>\n\n</v-container>\n</template>\n\n<script>\nimport VueTerminal from 'vue-terminal-ui'\n\nexport default {\n    name: \"Shell\",\n    components: {\n        VueTerminal\n    },\n    props: ['uuid', 'threadid'],\n    methods: {\n        closeWin(){\n            window.close();\n        },\n        async runShell(cmd){\n          let taskInfo = {uuid: this.$route.params.uuid, cmd, ThreadID:this.$route.params.threadid};\n          let ShellResp = await this.$store.dispatch('addTask', taskInfo);\n          return ShellResp;\n        },\n        async getDevices(){\n          let devicesJSON = await this.$store.dispatch('getDevices');\n          return devicesJSON;\n        },\n        async onCliCommand(data, resolve, reject){\n            if (data.text !== undefined){\n                this.getDevices()\n                .then(()=>{\n                    if(this.$store.state.core.devicesID.indexOf(this.$route.params.uuid)===-1){\n                        this.overlay = true;\n                    }\n                })\n                let finalCMD = data.text;\n                if (this.$route.params.PSbool === 'ps'){\n                    finalCMD = 'powershell -C \"' + finalCMD.replace(/\"/g, '\\\\\"') + '\"';\n                }\n                let respShell = await this.runShell(finalCMD);\n                resolve(respShell);\n            }else{\n                reject('ErrorReject');\n            }\n        },\n        \n    },\n    data: ()=>({\n        overlay: false\n    }),\n    created() {\n        let itemStr = localStorage.getItem('authtoken');\n        const itemStrJ = JSON.parse(itemStr);\n        this.$store.state.auth.authtoken = itemStrJ.value;\n    },\n    watch: {\n        overlay: function(val){\n            if (val==true){\n                window.addEventListener(\"keypress\", e => {\n                    e.preventDefault();\n                });\n            }\n        }\n    },\n}\n</script>\n\n<style>\n.cmd_out {\n    white-space: pre-line\n}\n</style>"]}]}